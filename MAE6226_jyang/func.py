import math
import numpy

class Source:
   """Contains information related to a source (or sink)."""
   def __init__(self, strength, x, y):
      """Initializes the singularity.

      Arguments
      ---------
      strength -- strength of the singularity.
      x, y -- coordinates of the singularity.
      """

      self.strength = strength
      self.x, self.y = x, y

   def velocity(self, X, Y):
      """Computes the velocity field generated by the singularity.

      Arguments
      ---------
      X, Y -- mesh grid.
      """
      self.u = self.strength/(2*math.pi)*(X-self.x)/((X-self.x)**2+(Y-self.y)**2)
      self.v = self.strength/(2*math.pi)*(Y-self.y)/((X-self.x)**2+(Y-self.y)**2)

   def stream_function(self, X, Y):
      """Computes the stream-function generated by the singularity.

      Arguments
      ---------
      X, Y -- mesh grid.
      """
      self.psi = self.strength/(2*math.pi)*numpy.arctan2((Y-self.y), (X-self.x))


class Vortex:
   """Contains information related to a vortex."""
   def __init__(self, strength, x, y):
      """Initializes the vortex.

      Arguments
      ---------
      strength -- strength of the vortex.
      x, y -- coordinates of the vortex.
      """

      self.strength = strength
      self.x, self.y = x, y

   def velocity(self, X, Y):
      """Computes the velocity field generated by a vortex.
      Arguments
      ---------
      X, Y -- mesh grid.
      """

      self.u = +self.strength/(2*math.pi)*(Y-self.y)/((X-self.x)**2+(Y-self.y)**2)
      self.v = -self.strength/(2*math.pi)*(X-self.x)/((X-self.x)**2+(Y-self.y)**2)

   def stream_function(self, X, Y):
      """Computes the stream-function generated by a vortex.
      Arguments
      ---------
      X, Y -- mesh grid.
      """
      self.psi = -self.strength/(4*math.pi)*numpy.log((X-self.x)**2+(Y-self.y)**2)

class Doublet:
   """Contains information related to a doublet."""
   def __init__(self, strength, x, y):
      """Initializes the doublet.
      Arguments
      ---------
      strength -- strength of the doublet.
      x, y -- coordinates of the doublet.
      """
      self.strength = strength
      self.x, self.y = x, y

   def velocity(self, X, Y):
      """Computes the velocity field generated by a doublet.

      Arguments
      ---------
      X, Y -- mesh grid.
      """
      self.u = -self.strength/(2*math.pi)*\
                    ((X-self.x)**2-(Y-self.y)**2)/((X-self.x)**2+(Y-self.y)**2)**2
      self.v = -self.strength/(2*math.pi)*\
                    2*(X-self.x)*(Y-self.y)/((X-self.x)**2+(Y-self.y)**2)**2

   def stream_function(self, X, Y):
      """Computes the stream-function generated by a doublet.
      Arguments
      ---------
      X, Y -- mesh grid.
      """
      self.psi = -self.strength/(2*math.pi)*(Y-self.y)/((X-self.x)**2+(Y-self.y)**2)

